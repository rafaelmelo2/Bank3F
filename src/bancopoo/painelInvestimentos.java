/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bancopoo;



import dados.BdBanco;
import javax.swing.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import objetos.Email;
import objetos.Investimentos;
import objetos.Usuario;




/**
 *
 * @author Fael
 */
public class painelInvestimentos extends javax.swing.JFrame {
    
    BdBanco db = new BdBanco();
    Email email2 = new Email();
    
    private final String bitcoinPriceApiUrl = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=brl";
    private final String ethereumPriceApiUrl = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=brl";
    private final String dolarPriceApiUrl = "https://api.coingecko.com/api/v3/simple/price?ids=usd&vs_currencies=brl";
    
    private Double precoBitcoin;
    private Double precoEthereum;
    private Double precoDolar;
    
    
    
    private volatile boolean isRunning = true;
    Investimentos investimentos;
    
    private Usuario usuario_logado;
    JButton botaoInvestir;
    
    
    public painelInvestimentos(Usuario usuario_logado, JButton botaoInvestir) {
        ImageIcon icon = new ImageIcon("src/img/bank.png"); // Substitua pelo caminho do ícone .ico ou .png
        setIconImage(icon.getImage());
        initComponents();
        this.botaoInvestir = botaoInvestir;
        this.usuario_logado = usuario_logado;
        
        db.conectar();
        
        atualizaInvestimentos();
        
        atualizaPrecos();
        
        
        db.desconectar();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelInvestimentos = new javax.swing.JPanel();
        botaoSair = new javax.swing.JButton();
        PanelBitcoin = new javax.swing.JPanel();
        LabelforBit = new javax.swing.JLabel();
        labelBitcoinPreco = new javax.swing.JLabel();
        LabelforBitInvestido = new javax.swing.JLabel();
        labelInvestidoBitcoin = new javax.swing.JLabel();
        botaoInvestirBitcoin = new javax.swing.JButton();
        botaoVenderBitcoin = new javax.swing.JButton();
        PanelHeaderBit = new javax.swing.JPanel();
        LabelHeaderBit = new javax.swing.JLabel();
        PanelEthereum = new javax.swing.JPanel();
        LabelforEt = new javax.swing.JLabel();
        LabelforEtInvestido = new javax.swing.JLabel();
        botaoInvestirEthereum = new javax.swing.JButton();
        labelPrecoEthereum = new javax.swing.JLabel();
        labelInvestidoEthereum = new javax.swing.JLabel();
        botaoVenderEthereum = new javax.swing.JButton();
        PanelHeaderEt = new javax.swing.JPanel();
        LabelHeaderEt = new javax.swing.JLabel();
        PanelDol = new javax.swing.JPanel();
        LabelforDol = new javax.swing.JLabel();
        LabelforDolInvestido = new javax.swing.JLabel();
        botaoInvestirDolar = new javax.swing.JButton();
        labelPrecoDolar = new javax.swing.JLabel();
        labelInvestidoDolar = new javax.swing.JLabel();
        botaoVenderDolar = new javax.swing.JButton();
        PanelHeaderDolar = new javax.swing.JPanel();
        LabelHeaderDolar = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        LabelInvestimentos = new javax.swing.JLabel();
        ImgBitcoin = new javax.swing.JLabel();
        ImgDol = new javax.swing.JLabel();
        ImgEth = new javax.swing.JLabel();
        labelErro = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FUFAS INVESTIMENTOS");
        setUndecorated(true);

        PanelInvestimentos.setBackground(new java.awt.Color(38, 15, 38));
        PanelInvestimentos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        botaoSair.setBackground(new java.awt.Color(227, 38, 54));
        botaoSair.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botaoSair.setForeground(new java.awt.Color(255, 255, 255));
        botaoSair.setText("SAIR");
        botaoSair.setBorder(null);
        botaoSair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairActionPerformed(evt);
            }
        });

        PanelBitcoin.setBackground(new java.awt.Color(248, 237, 248));
        PanelBitcoin.setPreferredSize(new java.awt.Dimension(200, 100));

        LabelforBit.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        LabelforBit.setForeground(new java.awt.Color(38, 15, 38));
        LabelforBit.setLabelFor(labelBitcoinPreco);
        LabelforBit.setText("Preço: R$");

        labelBitcoinPreco.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        labelBitcoinPreco.setForeground(new java.awt.Color(38, 15, 38));
        labelBitcoinPreco.setText(" ");
        labelBitcoinPreco.setToolTipText("Preço bitcoin");

        LabelforBitInvestido.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        LabelforBitInvestido.setForeground(new java.awt.Color(38, 15, 38));
        LabelforBitInvestido.setLabelFor(labelInvestidoBitcoin);
        LabelforBitInvestido.setText("Investido:");

        labelInvestidoBitcoin.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        labelInvestidoBitcoin.setForeground(new java.awt.Color(38, 15, 38));
        labelInvestidoBitcoin.setText(" ");
        labelInvestidoBitcoin.setToolTipText("Valor já investido");

        botaoInvestirBitcoin.setBackground(new java.awt.Color(153, 255, 153));
        botaoInvestirBitcoin.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botaoInvestirBitcoin.setText("INVESTIR");
        botaoInvestirBitcoin.setToolTipText("Investir");
        botaoInvestirBitcoin.setBorder(null);
        botaoInvestirBitcoin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoInvestirBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInvestirBitcoinActionPerformed(evt);
            }
        });

        botaoVenderBitcoin.setBackground(new java.awt.Color(255, 204, 102));
        botaoVenderBitcoin.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botaoVenderBitcoin.setForeground(new java.awt.Color(255, 255, 255));
        botaoVenderBitcoin.setText("VENDER");
        botaoVenderBitcoin.setToolTipText("Vender ");
        botaoVenderBitcoin.setBorder(null);
        botaoVenderBitcoin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoVenderBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVenderBitcoinActionPerformed(evt);
            }
        });

        PanelHeaderBit.setBackground(new java.awt.Color(255, 153, 0));

        LabelHeaderBit.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelHeaderBit.setForeground(new java.awt.Color(255, 255, 255));
        LabelHeaderBit.setText("Bitcoin");

        javax.swing.GroupLayout PanelHeaderBitLayout = new javax.swing.GroupLayout(PanelHeaderBit);
        PanelHeaderBit.setLayout(PanelHeaderBitLayout);
        PanelHeaderBitLayout.setHorizontalGroup(
            PanelHeaderBitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelHeaderBitLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(LabelHeaderBit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelHeaderBitLayout.setVerticalGroup(
            PanelHeaderBitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelHeaderBitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelHeaderBit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout PanelBitcoinLayout = new javax.swing.GroupLayout(PanelBitcoin);
        PanelBitcoin.setLayout(PanelBitcoinLayout);
        PanelBitcoinLayout.setHorizontalGroup(
            PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBitcoinLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(botaoVenderBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoInvestirBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(PanelBitcoinLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelforBit)
                    .addComponent(LabelforBitInvestido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelInvestidoBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBitcoinPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(PanelHeaderBit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelBitcoinLayout.setVerticalGroup(
            PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBitcoinLayout.createSequentialGroup()
                .addComponent(PanelHeaderBit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelforBit)
                    .addComponent(labelBitcoinPreco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelforBitInvestido)
                    .addComponent(labelInvestidoBitcoin))
                .addGap(18, 18, 18)
                .addGroup(PanelBitcoinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoVenderBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoInvestirBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        PanelEthereum.setBackground(new java.awt.Color(248, 237, 248));
        PanelEthereum.setForeground(new java.awt.Color(38, 15, 38));
        PanelEthereum.setPreferredSize(new java.awt.Dimension(200, 100));

        LabelforEt.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        LabelforEt.setForeground(new java.awt.Color(38, 15, 38));
        LabelforEt.setLabelFor(labelPrecoEthereum);
        LabelforEt.setText("Preço: R$");

        LabelforEtInvestido.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        LabelforEtInvestido.setForeground(new java.awt.Color(38, 15, 38));
        LabelforEtInvestido.setLabelFor(labelInvestidoEthereum);
        LabelforEtInvestido.setText("Investido:");

        botaoInvestirEthereum.setBackground(new java.awt.Color(153, 255, 153));
        botaoInvestirEthereum.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botaoInvestirEthereum.setText("INVESTIR");
        botaoInvestirEthereum.setToolTipText("Investir");
        botaoInvestirEthereum.setBorder(null);
        botaoInvestirEthereum.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoInvestirEthereum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInvestirEthereumActionPerformed(evt);
            }
        });

        labelPrecoEthereum.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        labelPrecoEthereum.setForeground(new java.awt.Color(38, 15, 38));
        labelPrecoEthereum.setText(" ");
        labelPrecoEthereum.setToolTipText("Preço ethereum");

        labelInvestidoEthereum.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        labelInvestidoEthereum.setForeground(new java.awt.Color(38, 15, 38));
        labelInvestidoEthereum.setText(" ");
        labelInvestidoEthereum.setToolTipText("Valor já investido");

        botaoVenderEthereum.setBackground(new java.awt.Color(255, 204, 102));
        botaoVenderEthereum.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botaoVenderEthereum.setForeground(new java.awt.Color(255, 255, 255));
        botaoVenderEthereum.setText("VENDER");
        botaoVenderEthereum.setToolTipText("Vender ");
        botaoVenderEthereum.setBorder(null);
        botaoVenderEthereum.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoVenderEthereum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVenderEthereumActionPerformed(evt);
            }
        });

        PanelHeaderEt.setBackground(new java.awt.Color(102, 102, 255));

        LabelHeaderEt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelHeaderEt.setForeground(new java.awt.Color(255, 255, 255));
        LabelHeaderEt.setText("Ethereum");

        javax.swing.GroupLayout PanelHeaderEtLayout = new javax.swing.GroupLayout(PanelHeaderEt);
        PanelHeaderEt.setLayout(PanelHeaderEtLayout);
        PanelHeaderEtLayout.setHorizontalGroup(
            PanelHeaderEtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelHeaderEtLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(LabelHeaderEt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelHeaderEtLayout.setVerticalGroup(
            PanelHeaderEtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelHeaderEtLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(LabelHeaderEt)
                .addContainerGap())
        );

        javax.swing.GroupLayout PanelEthereumLayout = new javax.swing.GroupLayout(PanelEthereum);
        PanelEthereum.setLayout(PanelEthereumLayout);
        PanelEthereumLayout.setHorizontalGroup(
            PanelEthereumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEthereumLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(PanelEthereumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEthereumLayout.createSequentialGroup()
                        .addComponent(LabelforEt)
                        .addGap(18, 18, 18)
                        .addComponent(labelPrecoEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelEthereumLayout.createSequentialGroup()
                        .addComponent(LabelforEtInvestido)
                        .addGap(18, 18, 18)
                        .addComponent(labelInvestidoEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelEthereumLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(botaoVenderEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoInvestirEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addComponent(PanelHeaderEt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelEthereumLayout.setVerticalGroup(
            PanelEthereumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEthereumLayout.createSequentialGroup()
                .addComponent(PanelHeaderEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelEthereumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrecoEthereum)
                    .addComponent(LabelforEt))
                .addGap(18, 18, 18)
                .addGroup(PanelEthereumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelforEtInvestido)
                    .addComponent(labelInvestidoEthereum))
                .addGap(18, 18, 18)
                .addGroup(PanelEthereumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoInvestirEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoVenderEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        PanelDol.setBackground(new java.awt.Color(248, 237, 248));
        PanelDol.setForeground(new java.awt.Color(38, 15, 38));
        PanelDol.setPreferredSize(new java.awt.Dimension(200, 100));

        LabelforDol.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        LabelforDol.setForeground(new java.awt.Color(38, 15, 38));
        LabelforDol.setLabelFor(labelPrecoDolar);
        LabelforDol.setText("Preço: R$");

        LabelforDolInvestido.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        LabelforDolInvestido.setForeground(new java.awt.Color(38, 15, 38));
        LabelforDolInvestido.setLabelFor(labelInvestidoDolar);
        LabelforDolInvestido.setText("Investido:");

        botaoInvestirDolar.setBackground(new java.awt.Color(153, 255, 153));
        botaoInvestirDolar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botaoInvestirDolar.setText("INVESTIR");
        botaoInvestirDolar.setToolTipText("Investir");
        botaoInvestirDolar.setBorder(null);
        botaoInvestirDolar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoInvestirDolar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInvestirDolarActionPerformed(evt);
            }
        });

        labelPrecoDolar.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        labelPrecoDolar.setForeground(new java.awt.Color(38, 15, 38));
        labelPrecoDolar.setText(" ");
        labelPrecoDolar.setToolTipText("Preço dólar");

        labelInvestidoDolar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        labelInvestidoDolar.setForeground(new java.awt.Color(38, 15, 38));
        labelInvestidoDolar.setText(" ");
        labelInvestidoDolar.setToolTipText("Valor já investido");

        botaoVenderDolar.setBackground(new java.awt.Color(255, 204, 102));
        botaoVenderDolar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        botaoVenderDolar.setForeground(new java.awt.Color(255, 255, 255));
        botaoVenderDolar.setText("VENDER");
        botaoVenderDolar.setToolTipText("Vender ");
        botaoVenderDolar.setBorder(null);
        botaoVenderDolar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoVenderDolar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVenderDolarActionPerformed(evt);
            }
        });

        PanelHeaderDolar.setBackground(new java.awt.Color(51, 204, 0));

        LabelHeaderDolar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelHeaderDolar.setForeground(new java.awt.Color(255, 255, 255));
        LabelHeaderDolar.setText("Dólar");

        javax.swing.GroupLayout PanelHeaderDolarLayout = new javax.swing.GroupLayout(PanelHeaderDolar);
        PanelHeaderDolar.setLayout(PanelHeaderDolarLayout);
        PanelHeaderDolarLayout.setHorizontalGroup(
            PanelHeaderDolarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelHeaderDolarLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(LabelHeaderDolar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelHeaderDolarLayout.setVerticalGroup(
            PanelHeaderDolarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelHeaderDolarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelHeaderDolar, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout PanelDolLayout = new javax.swing.GroupLayout(PanelDol);
        PanelDol.setLayout(PanelDolLayout);
        PanelDolLayout.setHorizontalGroup(
            PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDolLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelDolLayout.createSequentialGroup()
                        .addGroup(PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelforDol)
                            .addComponent(LabelforDolInvestido))
                        .addGap(34, 34, 34)
                        .addGroup(PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelPrecoDolar, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(labelInvestidoDolar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelDolLayout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addComponent(botaoVenderDolar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoInvestirDolar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
            .addComponent(PanelHeaderDolar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelDolLayout.setVerticalGroup(
            PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDolLayout.createSequentialGroup()
                .addComponent(PanelHeaderDolar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelforDol)
                    .addComponent(labelPrecoDolar))
                .addGap(18, 18, 18)
                .addGroup(PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelforDolInvestido)
                    .addComponent(labelInvestidoDolar))
                .addGap(18, 18, 18)
                .addGroup(PanelDolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoVenderDolar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoInvestirDolar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 102));

        LabelInvestimentos.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        LabelInvestimentos.setForeground(new java.awt.Color(38, 15, 38));
        LabelInvestimentos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelInvestimentos.setText("Investimentos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(LabelInvestimentos, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(LabelInvestimentos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        ImgBitcoin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bitcoin (1).png"))); // NOI18N
        ImgBitcoin.setToolTipText("Bitcoin");

        ImgDol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/dolares.png"))); // NOI18N
        ImgDol.setToolTipText("Dólar");

        ImgEth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ethereum.png"))); // NOI18N
        ImgEth.setToolTipText("Ethereum");

        labelErro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelErro.setForeground(new java.awt.Color(255, 51, 51));
        labelErro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout PanelInvestimentosLayout = new javax.swing.GroupLayout(PanelInvestimentos);
        PanelInvestimentos.setLayout(PanelInvestimentosLayout);
        PanelInvestimentosLayout.setHorizontalGroup(
            PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ImgDol)
                    .addComponent(ImgBitcoin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                        .addComponent(PanelDol, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoSair, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelErro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                                        .addComponent(ImgEth)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PanelEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 61, Short.MAX_VALUE))))
                    .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                        .addComponent(PanelBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelInvestimentosLayout.setVerticalGroup(
            PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ImgBitcoin)
                .addGap(139, 139, 139)
                .addComponent(ImgDol)
                .addGap(75, 75, 75))
            .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(PanelInvestimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(ImgEth))
                    .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PanelEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(labelErro, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoSair, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(PanelInvestimentosLayout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(PanelBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(PanelDol, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(PanelInvestimentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelInvestimentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSairActionPerformed
        isRunning = false;
        botaoInvestir.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_botaoSairActionPerformed

    private void botaoVenderDolarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVenderDolarActionPerformed
        atualizaPrecosInvestido();
        Double valorInvestido = Double.parseDouble(labelInvestidoDolar.getText());
        
        String valorSaqueStr = JOptionPane.showInputDialog(null, "Digite o valor do saque:", "Valor do Saque", JOptionPane.QUESTION_MESSAGE);
        Double valorSaqueDouble = Double.parseDouble(valorSaqueStr);
        
        if(valorSaqueDouble>valorInvestido){
            JOptionPane.showMessageDialog(this, "Valor inválido. Insira um valor numérico válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            int opcao = JOptionPane.showConfirmDialog(this,"Tem certeza que deseja vender "+valorSaqueDouble+" em dólar?","Confirmação",JOptionPane.YES_NO_OPTION);
            if (opcao == JOptionPane.YES_OPTION) {
                db.conectar();
                if(db.estaConectado()){
                    Double saldoAtual = usuario_logado.getSaldo();
                    Double saldoNovo =  saldoAtual + valorSaqueDouble;
                    Double resto = valorInvestido - valorSaqueDouble;
                    
                    db.inserirInvestimento(usuario_logado.getCpf(), "dolar", resto, investimentos.getValordolarComprado());
                    
                    usuario_logado.setSaldo(saldoNovo);
                    db.setSaldo(usuario_logado.getCpf(), saldoNovo);
                    
                    db.inserirTransacao(usuario_logado.getCpf(), "Saque Dólar -- Valor: "+ valorSaqueDouble +", Preço: " +precoDolar, valorInvestido, saldoNovo);
                    
                    this.investimentos = db.getInvestimentos(usuario_logado.getCpf());
                    
                    atualizaInvestimentos();
                    JOptionPane.showMessageDialog(null, "Saque de R$" + valorSaqueDouble + " realizado com sucesso! Saldo atualizado: R$" + saldoNovo, "Saque Realizado", JOptionPane.INFORMATION_MESSAGE);
                    
                    String destinatario = usuario_logado.getEmail();
                    String assunto = "Venda Dólar 3F";
                    String texto = "Olá " + usuario_logado.getNome() + ",\n\n"
                        + "Venda de dólar em sua conta foi efetuado com sucesso.\n"
                        + "Quantidade recebida: R$" + valorSaqueDouble + "\n"
                        + "Saldo Atual: R$" + saldoNovo + "\n"
                        + "Descrição: Venda de dólar \n\n"
                        + "Agradecemos por escolher nossos serviços bancários.\n\n"
                        + "Atenciosamente,\n"
                        + "Equipe do Banco 3F";
                    
                    email2.enviaEmailSemAnexo(destinatario, assunto, texto);
                    
                }
                db.desconectar();
            }
        }
    }//GEN-LAST:event_botaoVenderDolarActionPerformed

    private void botaoInvestirBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoInvestirBitcoinActionPerformed
        try {
            String quantidade = JOptionPane.showInputDialog(this, "Quanto você deseja investir em Bitcoins?", "Investimento em Bitcoin", JOptionPane.QUESTION_MESSAGE);
            double valorInvestimento = Double.parseDouble(quantidade);
            
            
            if (valorInvestimento > usuario_logado.getSaldo()) {
                labelErro.setText("Saldo insuficiente");
                return;
            }else{
                int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja investir R$ " + valorInvestimento + "?", "Confirmação de Investimento", JOptionPane.YES_NO_OPTION);
                if (resposta == JOptionPane.YES_OPTION) {
                    db.conectar();
                        if(db.estaConectado()){
                            Double bitcoinPreco = fetchBitcoinPrice();
                            
                            double valorBitcoinInvestido = Double.parseDouble(labelInvestidoBitcoin.getText());
                            db.inserirInvestimento(usuario_logado.getCpf(), "bitcoin", valorBitcoinInvestido + valorInvestimento, bitcoinPreco);
                            Double novoSaldo = usuario_logado.getSaldo() - valorInvestimento;
                            
                            usuario_logado.setSaldo(novoSaldo);
                            db.setSaldo(usuario_logado.getCpf(), novoSaldo);
                            db.inserirTransacao(usuario_logado.getCpf(), "Compra de " +valorInvestimento +" em Bitcoin, Preço: "+ bitcoinPreco, valorInvestimento, novoSaldo);
                            atualizaInvestimentos();
                            
                            String destinatario = usuario_logado.getEmail();
                            String assunto = "Compra Bitcoin 3F";
                            String texto = "Olá " + usuario_logado.getNome() + ",\n\n"
                                + "Compra de bitcoin em sua conta foi efetuado com sucesso.\n"
                                + "Quantidade comprada: R$" + quantidade + "\n"
                                + "Saldo Atual: R$" + novoSaldo + "\n"
                                + "Descrição: Compra de bitcoin \n\n"
                                + "Agradecemos por escolher nossos serviços bancários.\n\n"
                                + "Atenciosamente,\n"
                                + "Equipe do Banco 3F";

                            email2.enviaEmailSemAnexo(destinatario, assunto, texto);
                            
                        }
                    db.desconectar(); 
                }
            }
            

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido. Insira um valor numérico válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_botaoInvestirBitcoinActionPerformed

    private void botaoInvestirEthereumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoInvestirEthereumActionPerformed
       try {
            String quantidade = JOptionPane.showInputDialog(this, "Quanto você deseja investir em Ethereum?", "Investimento em Ethereum", JOptionPane.QUESTION_MESSAGE);
            double valorInvestimento = Double.parseDouble(quantidade);
            
            
            if (valorInvestimento > usuario_logado.getSaldo()) {
                labelErro.setText("Saldo insuficiente ");
                return;
            }else{
                int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja investir R$ " + valorInvestimento + "?", "Confirmação de Investimento", JOptionPane.YES_NO_OPTION);
                if (resposta == JOptionPane.YES_OPTION) {
                    db.conectar();
                        if(db.estaConectado()){
                            Double ethereumPreco = fetchEthereumPrice();
                            double valorEthereumInvestido = Double.parseDouble(labelInvestidoEthereum.getText());
                            db.inserirInvestimento(usuario_logado.getCpf(), "ethereum", valorEthereumInvestido + valorInvestimento, ethereumPreco);
                            Double novoSaldo = usuario_logado.getSaldo() - valorInvestimento;
                            usuario_logado.setSaldo(novoSaldo);
                            db.setSaldo(usuario_logado.getCpf(), novoSaldo);
                            db.inserirTransacao(usuario_logado.getCpf(), "Compra de " +valorInvestimento +" em Ethereum, Preço: "+ ethereumPreco, valorInvestimento, novoSaldo);
                            atualizaInvestimentos();
                            
                            String destinatario = usuario_logado.getEmail();
                            String assunto = "Compra Ethereum 3F";
                            String texto = "Olá " + usuario_logado.getNome() + ",\n\n"
                                + "Compra de ethereum em sua conta foi efetuado com sucesso.\n"
                                + "Quantidade comprada: R$" + quantidade + "\n"
                                + "Saldo Atual: R$" + novoSaldo + "\n"
                                + "Descrição: Compra de ethereum \n\n"
                                + "Agradecemos por escolher nossos serviços bancários.\n\n"
                                + "Atenciosamente,\n"
                                + "Equipe do Banco 3F";

                            email2.enviaEmailSemAnexo(destinatario, assunto, texto);
                        
                        }
                    db.desconectar();
                }
            }
            

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido. Insira um valor numérico válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoInvestirEthereumActionPerformed

    private void botaoInvestirDolarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoInvestirDolarActionPerformed
        try {
            String quantidade = JOptionPane.showInputDialog(this, "Quanto você deseja investir em Dólar?", "Investimento em Ethereum", JOptionPane.QUESTION_MESSAGE);
            double valorInvestimento = Double.parseDouble(quantidade);
            
            
            if (valorInvestimento > usuario_logado.getSaldo()) {
                labelErro.setText("Saldo insuficiente ");
                return;
            }else{
                int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja investir R$ " + valorInvestimento + "?", "Confirmação de Investimento", JOptionPane.YES_NO_OPTION);
                if (resposta == JOptionPane.YES_OPTION) {
                    db.conectar();
                        if(db.estaConectado()){
                            Double dolarPreco = fetchDolarPrice();
                            
                            double valorDolarInvestido = Double.parseDouble(labelInvestidoDolar.getText());
                            db.inserirInvestimento(usuario_logado.getCpf(), "dolar", valorDolarInvestido + valorInvestimento, dolarPreco);
                            Double novoSaldo = usuario_logado.getSaldo() - valorInvestimento;
                            
                            usuario_logado.setSaldo(novoSaldo);
                            db.setSaldo(usuario_logado.getCpf(), novoSaldo);
                            db.inserirTransacao(usuario_logado.getCpf(), "Compra de " +valorInvestimento +" em Dolar, Preço: "+ dolarPreco, valorInvestimento, novoSaldo);
                            atualizaInvestimentos();
                            
                            String destinatario = usuario_logado.getEmail();
                            String assunto = "Compra Dólar 3F";
                            String texto = "Olá " + usuario_logado.getNome() + ",\n\n"
                                + "Compra de dolar em sua conta foi efetuado com sucesso.\n"
                                + "Quantidade comprada: R$" + quantidade + "\n"
                                + "Saldo Atual: R$" + novoSaldo + "\n"
                                + "Descrição: Compra de dólar \n\n"
                                + "Agradecemos por escolher nossos serviços bancários.\n\n"
                                + "Atenciosamente,\n"
                                + "Equipe do Banco 3F";

                            email2.enviaEmailSemAnexo(destinatario, assunto, texto);
                            
                        }
                    db.desconectar();
                }
            }
            

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor inválido. Insira um valor numérico válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoInvestirDolarActionPerformed

    private void botaoVenderBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVenderBitcoinActionPerformed
        atualizaPrecosInvestido();
        Double valorInvestido = Double.parseDouble(labelInvestidoBitcoin.getText());
        
        String valorSaqueStr = JOptionPane.showInputDialog(null, "Digite o valor do saque:", "Valor do Saque", JOptionPane.QUESTION_MESSAGE);
        Double valorSaqueDouble = Double.parseDouble(valorSaqueStr);
        
        if(valorSaqueDouble>valorInvestido){
            JOptionPane.showMessageDialog(this, "Valor inválido. Insira um valor numérico válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            int opcao = JOptionPane.showConfirmDialog(this,"Tem certeza que deseja vender "+valorSaqueDouble+" em bitcoins?","Confirmação",JOptionPane.YES_NO_OPTION);
            if (opcao == JOptionPane.YES_OPTION) {
                db.conectar();
                if(db.estaConectado()){
                    Double saldoAtual = usuario_logado.getSaldo();
                    Double saldoNovo =  saldoAtual + valorSaqueDouble;
                    Double resto = valorInvestido - valorSaqueDouble;
                    
                    db.inserirInvestimento(usuario_logado.getCpf(), "bitcoin", resto, investimentos.getValorbitcoinComprado());
                    
                    usuario_logado.setSaldo(saldoNovo);
                    db.setSaldo(usuario_logado.getCpf(), saldoNovo);
                    db.inserirTransacao(usuario_logado.getCpf(), "Saque Bitcoin -- Valor: "+ valorSaqueDouble +", Preço: " +precoBitcoin, valorInvestido, saldoNovo);
                    
                    this.investimentos = db.getInvestimentos(usuario_logado.getCpf());
                    
                    atualizaInvestimentos();
                    JOptionPane.showMessageDialog(null, "Saque de R$" + valorSaqueDouble + " realizado com sucesso! Saldo atualizado: R$" + saldoNovo, "Saque Realizado", JOptionPane.INFORMATION_MESSAGE);
                    
                    
                    
                    String destinatario = usuario_logado.getEmail();
                    String assunto = "Venda Bitcoin 3F";
                    String texto = "Olá " + usuario_logado.getNome() + ",\n\n"
                        + "Venda de bitcoin em sua conta foi efetuado com sucesso.\n"
                        + "Quantidade recebida: R$" + valorSaqueDouble + "\n"
                        + "Saldo Atual: R$" + saldoNovo + "\n"
                        + "Descrição: Venda de bitcoin \n\n"
                        + "Agradecemos por escolher nossos serviços bancários.\n\n"
                        + "Atenciosamente,\n"
                        + "Equipe do Banco 3F";
                    
                    email2.enviaEmailSemAnexo(destinatario, assunto, texto);
                }
                db.desconectar();
            }
        }
            
        
        
        
        
    }//GEN-LAST:event_botaoVenderBitcoinActionPerformed

    private void botaoVenderEthereumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVenderEthereumActionPerformed
        atualizaPrecosInvestido();
        Double valorInvestido = Double.parseDouble(labelInvestidoEthereum.getText());
        
        String valorSaqueStr = JOptionPane.showInputDialog(null, "Digite o valor do saque:", "Valor do Saque", JOptionPane.QUESTION_MESSAGE);
        Double valorSaqueDouble = Double.parseDouble(valorSaqueStr);
        
        if(valorSaqueDouble>valorInvestido){
            JOptionPane.showMessageDialog(this, "Valor inválido. Insira um valor numérico válido.", "Erro", JOptionPane.ERROR_MESSAGE);
        }else{
            int opcao = JOptionPane.showConfirmDialog(this,"Tem certeza que deseja vender "+valorSaqueDouble+" em ethereum?","Confirmação",JOptionPane.YES_NO_OPTION);
            if (opcao == JOptionPane.YES_OPTION) {
                db.conectar();
                if(db.estaConectado()){
                    Double saldoAtual = usuario_logado.getSaldo();
                    Double saldoNovo =  saldoAtual + valorSaqueDouble;
                    Double resto = valorInvestido - valorSaqueDouble;
                    
                                        
                    usuario_logado.setSaldo(saldoNovo);
                    
                    db.inserirInvestimento(usuario_logado.getCpf(), "ethereum", resto, investimentos.getValorethereumComprado());
                    db.setSaldo(usuario_logado.getCpf(), saldoNovo);
                    db.inserirTransacao(usuario_logado.getCpf(), "Saque Ethereum -- Valor: "+ valorSaqueDouble +", Preço: " +precoEthereum, valorInvestido, saldoNovo);
                    
                    this.investimentos = db.getInvestimentos(usuario_logado.getCpf());
                    
                    atualizaInvestimentos();
                    JOptionPane.showMessageDialog(null, "Saque de R$" + valorSaqueDouble + " realizado com sucesso! Saldo atualizado: R$" + saldoNovo, "Saque Realizado", JOptionPane.INFORMATION_MESSAGE);
                    
                    String destinatario = usuario_logado.getEmail();
                    String assunto = "Venda Ethereum 3F";
                    String texto = "Olá " + usuario_logado.getNome() + ",\n\n"
                        + "Venda de ethereum em sua conta foi efetuado com sucesso.\n"
                        + "Quantidade recebida: R$" + valorSaqueDouble + "\n"
                        + "Saldo Atual: R$" + saldoNovo + "\n"
                        + "Descrição: Venda de ethereum \n\n"
                        + "Agradecemos por escolher nossos serviços bancários.\n\n"
                        + "Atenciosamente,\n"
                        + "Equipe do Banco 3F";
                    
                    email2.enviaEmailSemAnexo(destinatario, assunto, texto);
                    
                }
                db.desconectar();
            }
        }
    }//GEN-LAST:event_botaoVenderEthereumActionPerformed

    /**
     * @param args the command line arguments
     */
    private double fetchBitcoinPrice() {
        double bitcoinPrice = 0.0;
        try {
            URL url = new URL(bitcoinPriceApiUrl); // Cria um objeto URL usando a URL fornecida na variável "bitcoinPriceApiUrl".
            
            HttpURLConnection conn = (HttpURLConnection) url.openConnection(); // Abre uma conexão HTTP para a URL fornecida.
            conn.setRequestMethod("GET"); // Define o método da requisição como "GET" para buscar dados.

            if (conn.getResponseCode() == 200) { // Se a resposta do servidor for bem-sucedida (código de resposta 200 - OK).
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));  // Cria um leitor de buffer para ler os dados de entrada da conexão.
                StringBuilder response = new StringBuilder(); // Cria um objeto StringBuilder para construir a resposta completa.
                
                String inputLine;
                
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine); // Lê cada linha da resposta e a adiciona ao StringBuilder.
                }
                in.close();  // Fecha o leitor de buffer.

                String responseStr = response.toString(); // Converte o conteúdo do StringBuilder para uma String.
                int startIndex = responseStr.indexOf("\"brl\":") + 6; // Encontra a posição do texto "\"brl\":" na resposta e adiciona 6 para apontar para o início do valor do preço do Bitcoin.
                int endIndex = responseStr.indexOf("}", startIndex); // Encontra a posição do caractere "}" que encerra o objeto JSON que contém o preço do Bitcoin.
                String bitcoinPriceStr = responseStr.substring(startIndex, endIndex); // Extrai a parte da resposta que contém o valor do preço do Bitcoin.
                bitcoinPrice = Double.parseDouble(bitcoinPriceStr); // Converte a String do preço do Bitcoin em um valor Double (número de ponto flutuante).
                this.precoBitcoin = bitcoinPrice;
            } else {
                // Se a resposta do servidor não for bem-sucedida.
                System.out.println("Error: Unable to fetch Bitcoin price data.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            // Imprime o rastreamento da pilha de erro, que mostra a sequência de chamadas de métodos que levaram à exceção.
        }
        
        return bitcoinPrice;
    }
    
    private double fetchEthereumPrice() {
        double ethereumPrice = 0.0;
        try {
            URL url = new URL(ethereumPriceApiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            if (conn.getResponseCode() == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                String responseStr = response.toString();
                int startIndex = responseStr.indexOf("\"brl\":") + 6;
                int endIndex = responseStr.indexOf("}", startIndex);
                String ethereumPriceStr = responseStr.substring(startIndex, endIndex);
                ethereumPrice = Double.parseDouble(ethereumPriceStr);
                this.precoEthereum = ethereumPrice;
            } else {
                System.out.println("Error: Unable to fetch Ethereum price data.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return ethereumPrice;
    }
    
    private double fetchDolarPrice() {
        double dolarPrice = 0.0;
        try {
            URL url = new URL(dolarPriceApiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            if (conn.getResponseCode() == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                String responseStr = response.toString();
                int startIndex = responseStr.indexOf("\"brl\":") + 6;
                int endIndex = responseStr.indexOf("}", startIndex);
                String dolarPriceStr = responseStr.substring(startIndex, endIndex);
                dolarPrice = Double.parseDouble(dolarPriceStr);
                this.precoDolar = dolarPrice;
            } else {
                System.out.println("Error: Unable to fetch Dolar price data.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        return dolarPrice;
    }
    
    private void atualizaPrecos() {
        Thread threadAtualizaBitcoinPreco = new Thread(new Runnable() {
            int i;
            @Override
            public void run() {
                while (isRunning) {
                    double bitcoinPrice = fetchBitcoinPrice();
                    double ethereumPrice = fetchEthereumPrice();
                    double dolarPrice = fetchDolarPrice();
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            labelBitcoinPreco.setText(String.valueOf(bitcoinPrice));
                            
                            labelPrecoEthereum.setText(String.valueOf(ethereumPrice));
                            
                            labelPrecoDolar.setText(String.valueOf(dolarPrice));
                            System.out.println(i);
                            i++;
                            atualizaPrecosInvestido();
                        }
                    });
                    try {
                        Thread.sleep(15000); // faz a thread esperar 15 segundos para retornar
                        
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        threadAtualizaBitcoinPreco.start();
        
    }
    
    private void atualizaInvestimentos() {
        this.investimentos = db.getInvestimentos(usuario_logado.getCpf());
        labelInvestidoBitcoin.setText(String.valueOf(investimentos.getBitcoin()));
        labelInvestidoEthereum.setText(String.valueOf(investimentos.getEthereum()));
        labelInvestidoDolar.setText(String.valueOf(investimentos.getDolar()));
        
        if(Double.parseDouble(labelInvestidoBitcoin.getText()) == 0){
            botaoVenderBitcoin.setEnabled(false);
        }else{
            botaoVenderBitcoin.setEnabled(true);
        }
        
        if(Double.parseDouble(labelInvestidoEthereum.getText()) == 0){
            botaoVenderEthereum.setEnabled(false);
        }else{
            botaoVenderEthereum.setEnabled(true);
        }
        
        if(Double.parseDouble(labelInvestidoDolar.getText()) == 0){
            botaoVenderDolar.setEnabled(false);
        }else{
            botaoVenderDolar.setEnabled(true);
        }
    }
    
    private void atualizaPrecosInvestido() {
        db.conectar();
        if(db.estaConectado()){
            if(Double.parseDouble(labelInvestidoBitcoin.getText()) != 0){
                Double qtdBitcoin = investimentos.getBitcoin();
                Double valorBitcoinComprado = investimentos.getValorbitcoinComprado();
                double valorAtualInvestimentoBitcoin = qtdBitcoin /  valorBitcoinComprado;
                double valorAtualBitcoinInvestido = valorAtualInvestimentoBitcoin * this.precoBitcoin;

                String valorFormatadoBitcoin = String.format("%.2f", valorAtualBitcoinInvestido);
                valorFormatadoBitcoin = valorFormatadoBitcoin.replace(",", ".");
                labelInvestidoBitcoin.setText(valorFormatadoBitcoin);
            }
            
            if(Double.parseDouble(labelInvestidoEthereum.getText()) != 0){
                Double qtdEthereum = investimentos.getEthereum();
                Double valorEthereumComprado = investimentos.getValorethereumComprado();
                double valorAtualInvestimentoEthereum = qtdEthereum /  valorEthereumComprado;
                double valorAtualEthereumInvestido = valorAtualInvestimentoEthereum * precoEthereum;

                String valorFormatadoEthereum = String.format("%.2f", valorAtualEthereumInvestido);
                valorFormatadoEthereum = valorFormatadoEthereum.replace(",", ".");
                labelInvestidoEthereum.setText(valorFormatadoEthereum);
            }    

            if(Double.parseDouble(labelInvestidoDolar.getText()) != 0){
                Double qtdDolar = investimentos.getDolar();
                Double valorDolarComprado = investimentos.getValordolarComprado();
                double valorAtualInvestimentoDolar = qtdDolar /  valorDolarComprado;
                double valorAtualDolarInvestido = valorAtualInvestimentoDolar * precoDolar;

                String valorFormatadoDolar = String.format("%.2f", valorAtualDolarInvestido);
                valorFormatadoDolar = valorFormatadoDolar.replace(",", ".");
                labelInvestidoDolar.setText(valorFormatadoDolar);
            }
        }
        db.desconectar();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImgBitcoin;
    private javax.swing.JLabel ImgDol;
    private javax.swing.JLabel ImgEth;
    private javax.swing.JLabel LabelHeaderBit;
    private javax.swing.JLabel LabelHeaderDolar;
    private javax.swing.JLabel LabelHeaderEt;
    private javax.swing.JLabel LabelInvestimentos;
    private javax.swing.JLabel LabelforBit;
    private javax.swing.JLabel LabelforBitInvestido;
    private javax.swing.JLabel LabelforDol;
    private javax.swing.JLabel LabelforDolInvestido;
    private javax.swing.JLabel LabelforEt;
    private javax.swing.JLabel LabelforEtInvestido;
    private javax.swing.JPanel PanelBitcoin;
    private javax.swing.JPanel PanelDol;
    private javax.swing.JPanel PanelEthereum;
    private javax.swing.JPanel PanelHeaderBit;
    private javax.swing.JPanel PanelHeaderDolar;
    private javax.swing.JPanel PanelHeaderEt;
    private javax.swing.JPanel PanelInvestimentos;
    private javax.swing.JButton botaoInvestirBitcoin;
    private javax.swing.JButton botaoInvestirDolar;
    private javax.swing.JButton botaoInvestirEthereum;
    private javax.swing.JButton botaoSair;
    private javax.swing.JButton botaoVenderBitcoin;
    private javax.swing.JButton botaoVenderDolar;
    private javax.swing.JButton botaoVenderEthereum;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelBitcoinPreco;
    private javax.swing.JLabel labelErro;
    private javax.swing.JLabel labelInvestidoBitcoin;
    private javax.swing.JLabel labelInvestidoDolar;
    private javax.swing.JLabel labelInvestidoEthereum;
    private javax.swing.JLabel labelPrecoDolar;
    private javax.swing.JLabel labelPrecoEthereum;
    // End of variables declaration//GEN-END:variables
}
